#
##
##workflows:
##  version: 2
##  build-deploy:
##    jobs:
##      - build
##      - deploy:
##          requires:
##            - build
##          filters:
##            branches:
##              only: master
##
##version: 2
##jobs: # A basic unit of work in a run
##  build: # runs not using Workflows must have a `build` job as entry point
##    # directory where steps are run
##    working_directory: ~/DjangoRestApisPostgresSQL
##    docker: # run the steps with Docker
##      # CircleCI Python images available at: https://hub.docker.com/r/circleci/python/
##      - image: circleci/python:3.6.4
##        environment: # environment variables for primary container
##          PIPENV_VENV_IN_PROJECT: true
##          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
##      # CircleCI PostgreSQL images available at: https://hub.docker.com/r/circleci/postgres/
##      - image: circleci/postgres:9.6.2
##        environment: # environment variables for the Postgres container.
##          POSTGRES_USER: root
##          POSTGRES_DB: circle_test
##    steps: # steps that comprise the `build` job
##      - checkout # check out source code to working directory
##      - run: sudo chown -R circleci:circleci /usr/local/bin
##      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
##      - restore_cache:
##      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
##          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
##      - run:
##          command: |
##            sudo pip install pipenv
##            pipenv install
##      - save_cache: # cache Python dependencies using checksum of Pipfile as the cache-key
##          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
##          paths:
##            - "venv"
##      - run:
##          command: |
##            pipenv run python manage.py test
##      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
##          path: test-results
##      - store_artifacts: # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
##          path: test-results
##          destination: tr1
##deploy:
##  steps:
##    - checkout
##    - run:
##        name: Deploy Master to Heroku
##        cmmand: |
##          git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master
##
##
#
#
#version: 2.1
#
#orbs:
#  heroku: circleci/heroku@1.2.2
#workflows:
#  heroku_deploy:
#    jobs:
#      - build
#      - heroku/deploy-via-git: # Use the pre-configured job, deploy-via-git
#          requires:
#            - build
#          filters:
#            branches:
#              only: master
#jobs:
#  build:
#    docker:
#      - image: circleci/python:3.6.4
#      - image: circleci/postgres:9.4.12-alpine
#    working_directory: ~/DjangoRestApisPostgresSQL
#    steps:
#      - checkout # check out source code to working directory
#      - run: sudo chown -R circleci:circleci /usr/local/bin
#      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
#      - restore_cache:
#      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
#          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
#      - run:
#          command: |
#            sudo pip install pipenv
#            pipenv install
#      - save_cache: # cache Python dependencies using checksum of Pipfile as the cache-key
#          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
#          paths:
#            - "venv"
#      - run:
#          command: |
#            pipenv run python manage.py test
#      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
#          path: test-results
#      - store_artifacts: # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
#          path: test-results
#          destination: tr1



version: 2
jobs:
  build:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      - run:
          name: docker-compose build
          command: docker-compose build
  deploy:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      # see: https://devcenter.heroku.com/articles/container-registry-and-runtime#using-a-ci-cd-platform
      - run:
          name: "build docker image"
          command: docker build --rm=false -t registry.heroku.com/${HEROKU_APP_NAME}/web .
      - run:
          name: setup heroku command
          command: bash .circleci/setup_heroku.sh
      - run:
          name: heroku maintenance on
          command: heroku maintenance:on --app ${HEROKU_APP_NAME}
      - run:
          # HEROKU_AUTH_TOKEN is generated by `heroku auth:token`
          name: "push container to registry.heroku.com"
          command: |
            docker login --username=_ --password=$HEROKU_AUTH_TOKEN registry.heroku.com
            docker push registry.heroku.com/${HEROKU_APP_NAME}/web
            heroku container:push web --app ${HEROKU_APP_NAME}
            heroku container:release web --app ${HEROKU_APP_NAME}
      - run:
          name: heroku maintenance off
          command: heroku maintenance:off --app ${HEROKU_APP_NAME}
workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
